name: Integration Tests

on:
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/integration/**'
      - 'package*.json'
      - 'tsconfig.json'
      - 'jest.config.js'
      - '.swcrc'
  push:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'tests/integration/**'
      - 'package*.json'
      - 'tsconfig.json'
      - 'jest.config.js'
      - '.swcrc'

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    # Uncomment and configure services as needed
    # services:
    #   postgres:
    #     image: postgres:15
    #     env:
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: test_db
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:full

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      # Add any setup steps for integration tests here
      # - name: Setup test database
      #   run: |
      #     npm run db:migrate:test
      #     npm run db:seed:test
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run integration tests
        run: npm run test:integration:ci
        env:
          NODE_ENV: testing
          LOG_LEVEL: silent
          # Add any required environment variables for integration tests
          # DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          # REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: integration-tests
          name: integration-tests-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './coverage/coverage-summary.json';

            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const total = coverage.total;
              
              const comment = `## ðŸ”§ Integration Tests Results
              
              | Metric | Coverage |
              |--------|----------|
              | Lines | ${total.lines.pct}% |
              | Functions | ${total.functions.pct}% |
              | Branches | ${total.branches.pct}% |
              | Statements | ${total.statements.pct}% |
              
              âœ… Integration tests passed successfully!`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
